xx <- get_historical(latlon = c(-32.63, 115.87), type = "rain")
library("bomrang", lib.loc="\\\\uniwa.uwa.edu.au/userhome/Staff5/00065525/My Documents/R/win-library/3.5")
xx <- get_historical(latlon = c(-32.63, 115.87), type = "rain")
source('D:/Test script.R')
xx <- get_historical(latlon = 009596, type = "rain")
source('D:/Test script.R')
xx <- get_historical(stationid = 009596, type = "rain")
source('D:/Test script.R')
xx <- get_historical(stationid = 009976, type = "rain")
source('D:/Test script.R')
xx <- get_historical(stationid = c(009976), type = "rain")
source('D:/Test script.R')
xx <- get_historical(stationid = "009976", type = "rain")
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download, install and initialize the H2O package for R.
install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
demo(h2o.glm)
## load the packages
#library(mlr)
library(EcoHydRology)
install.packages("EcoHydRology")
for(ii in seq(1,ncol(scaled_train),1)){
min_v<-min(train_data[,ii])
max_v<-max(train_data[,ii])
scaled_train[,ii]=(train_data[,ii]-min_v)/(max_v-min_v)
scaled_test[,ii]=(test_data[,ii]-min_v)/(max_v-min_v)
}
## load the packages
#library(mlr)
library(EcoHydRology)
library(caret)
install.packages("caret")
library(EcoHydRology)
library(EcoHydRology)
library(EcoHydRology)
library(caret)
install.package(ggplot2)
install.package(ggplot2)
install.package("magrittr")
install.package("xts")
install.package("reshape2")
install.package("h2o")
install.package("lubridate")
install.package("zoo")
install.package("EGRET")
install.package("reshape")
install.package("ggplot2")
install.package("JBTools")
install.package("magrittr")
install.package("xts")
install.package("reshape2")
install.package("h2o")
install.package("lubridate")
install.package("zoo")
install.package("EGRET")
install.package("reshape")
install.package("ggplot2")
install.package("JBTools")
install.packages("magrittr")
install.packages("xts")
install.packages("reshape2")
install.packages("h2o")
install.packages("lubridate")
install.packages("zoo")
install.packages("EGRET")
install.packages("reshape")
install.packages("ggplot2")
install.packages("JBTools")
install.packages("magrittr")
install.packages("h2o")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("h2o")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggplot2")
library(EcoHydRology)
library(caret)
library(EcoHydRology)
options(install.packages.check.source = "no")
install.packages(c("rscproxy","rcom"),repos="http://www.autstat.com/download",lib=.Library,type="win.binary")
library(rcom)
installstatconnDCOM()
installstatconnDCOM("E://Github 2018//aed_matlab_datatools//R Link//Inferno-master//Inferno-master//statconnDCOM.latest.exe")
library(rcom)
comRegisterRegistry()
library(rcom)
options(install.packages.check.source = "no")
install.packages(c("rscproxy","rcom"),repos="http://www.autstat.com/download",lib=.Library,type="win.binary")
install.packages(c("rscproxy", "rcom"), repos = "http://www.autstat.com/download", lib = .Library, type = "win.binary")
setwd("E:/Github 2018/aed_matlab_modeltools/TUFLOWFV/site_processing/peel/FCI")
## Relating Peel-Harvey FCI scores to water quality variables
# D.Yeoh, Nov 2019
library(dplyr) # package for data manipulation
library(mgcv) # packge for model fitting
# (1.0) Load required data for model building --------------------------------------------
#FCI scores and enviro data (1979-2018, all regions and water depths)
dat <- read.csv("FCI_scores_and_enviros.csv")
head(dat)
# note - the list of enviro variables has been trimmed down through various data explorations
# to omit highly correlated variables and those with little signal.
# (2.0) FIT MODELS ----------------------------------------------------------------------
# the best fit model for each water depth and region has been chosen through building models with
# all possible combinations of the available environmnetal variables and ranking the models by
# lowest AICc value. Where several models had similar AICc scores (delta AICc < 2), preference was given
# to the simpler (less variables) model.
# (2.1)  offshore waters - model for rivers
OS.R.dat <-
dat %>% filter(region2 == "river" &
depth == "OS") #subset relevant rows
#fit GAM model (mgcv package)
m1 <-
gam(
FCI ~  s(age_bottom) + s(salinity_.bottom) + s(oxygen_bottom)  + Period,
data = OS.R.dat,
method = "REML",
family = "gaussian"
)
summary(m1) #model summary
# (2.2)  nearshore waters - model for rivers
NS.R.dat <-
dat %>% filter(region2 == "river" &
depth == "NS") #subset relevant rows
#fit GAM model (mgcv package)
m2 <- gam(
FCI ~   s(salinity_.bottom) + s(hypoxia_area) + Period,
data = NS.R.dat,
method = "REML",
family = "gaussian"
)
summary(m2) #model summary
# (2.3)  nearshore waters - model for basins
NS.B.dat <-
dat %>% filter(region2 == "basin" &
depth == "NS") #subset relevant rows
#fit GAM model (mgcv package)
m3 <- gam(
FCI ~  s(salinity_.bottom) + s(hypoxia_area) + Period,
data = NS.B.dat,
method = "REML",
family = "gaussian"
)
summary(m3) #model summary
# note - there was no signal in the offshore basin dataset and hence no best fit model.
# (3.0) PREDICTIONS  ----------------------------------------------------------------
## each GAM model can be used to predict FCI scores for a given set of env variables
# the prediction requires values of each model term to be specified.
# for example, for m1 (OS, rivers  model)  - age_bottom, salinity_.bottom, oxygen_bottom and Period
# must be specified (with column names spelt exactly as they are in the model).
setwd("E:/Github 2018/aed_matlab_modeltools/TUFLOWFV/site_processing/peel/FCI/2016") #the folder of all your files to be looped
# to loop through all files in a folder
listcsv <-
dir(pattern = "*.csv") # creates the list of all the csv files in the directory
for (k in 1:length(listcsv)) {
# Super hacky BB code
temp1 <- strsplit(listcsv[k], "_")
temp2 <- temp1[[1]]
temp3 <- temp2[2]
temp4 <- strsplit(temp3, "[.]")
temp5 <- temp4[[1]]
theModel <- temp5[1]
ndat <- list() # creates a list
a <- list() # a list for results
ndat <- read.csv(listcsv[k])
filename <- paste0(listcsv[k])
grid.cell <- ndat$Cell
age_bottom <- ndat$Age
# cONVERT TO MG/l FROM MMOL/M3
oxygen_bottom <- ndat$Oxy
salinity_.bottom <- ndat$Sal
hypoxia_area <- ndat$Hypoxia
Period <- ndat$Period
a <-
data.frame(grid.cell,
age_bottom,
oxygen_bottom,
salinity_.bottom,
hypoxia_area,
Period,
stringsAsFactors = FALSE)
if (theModel == "M1") {
print("Running with M1")
#predict scores (and SE) for dataframe using gam m1
a$pred_FCI <- predict(m1, newdata = a, se.fit = TRUE)$fit
a$FCI.se <- predict(m1, newdata = a, se.fit = TRUE)$se.fit
}
if (theModel == "M2") {
print("Running with M2")
#predict scores (and SE) for dataframe using gam m1
a$pred_FCI <- predict(m2, newdata = a, se.fit = TRUE)$fit
a$FCI.se <- predict(m2, newdata = a, se.fit = TRUE)$se.fit
}
if (theModel == "M3") {
print("Running with M3")
#predict scores (and SE) for dataframe using gam m1
a$pred_FCI <- predict(m3, newdata = a, se.fit = TRUE)$fit
a$FCI.se <- predict(m3, newdata = a, se.fit = TRUE)$se.fit
}
#optional - add FCI grades to estimates
a <- a %>% mutate(
grade = ifelse(pred_FCI < 10.4, "E", "D"),
grade = ifelse(pred_FCI >= 41, "C", grade),
grade = ifelse(pred_FCI >= 54, "B", grade),
grade = ifelse(pred_FCI >= 71, "A", grade)
)
write.csv(
file = paste0(
"E:/Github 2018/aed_matlab_modeltools/TUFLOWFV/site_processing/peel/FCI/Model_Output/run_2016/",
filename
),
a[, c("grid.cell", "pred_FCI", "FCI.se", "grade")]
)
}
